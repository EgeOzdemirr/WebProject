@model CreateProductDto
@{
    ViewData["Title"] = "CreateProduct";
    Layout = "~/Areas/Admin/Views/AdminLayout/Index.cshtml";
}

<section class="content container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="chart-box">
                <h4>Yeni Ürün Ekleme Sayfası</h4>
                <br />
                <form method="post">
                    <div class="form-group">
                        <label for="categorySelect">Kategori</label>
                        @Html.DropDownListFor(x => x.CategoryId, (List<SelectListItem>)ViewBag.CategoryValues, new { @class = "form-control", @id = "categorySelect" })
                        <label for="basicInput">Kategori KDVsi</label>
                        <input type="text" id="kdvInput" class="form-control" readonly>
                        <br />
                        <label for="basicInput">Ürün Adı</label>
                        <input type="text" asp-for="ProductName" class="form-control" id="basicInput" placeholder="Ürün Adı">
                        <br />
                        <label for="productPrice">Ürün Fiyatı</label>
                        <input type="text" asp-for="ProductPrice" class="form-control" id="productPrice" placeholder="Ürün Fiyatı">
                        <br />
                        <label for="kdvIncludedPrice">KDV Eklenmiş Satış Fiyatı</label>
                        <input type="text" class="form-control" id="kdvIncludedPrice" readonly>
                        <br />
                        <label for="basicInput">Ürün Açıklaması</label>
                        <textarea asp-for="ProductDescription" rows="5" cols="1" class="form-control" id="basicInput" placeholder="Ürün Açıklaması"></textarea>
                        <br />
                        <label for="basicInput">Ürün Görseli</label>
                        <input type="file" asp-for="ProductImageUrl" class="form-control" id="basicInput">
                        <br />

                        @* <select class="form-control" asp-for="CategoryID" asp-items="ViewBag.CategoryValues"></select> *@
                    </div>
                    <button type="submit" class="btn btn-primary">Ürünü Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</section>

<script>
    // Kategori KDV oranlarını tanımlayın
    const kdvRates = {
        "Bilgisayar": 18,
        "Oyuncak": 8,
        "Kıyafet": 8,
        "Temizlik": 18,
        "Mobilya": 18,
        "Küçük Ev Aletleri": 18,
        "Elektronik": 18,
        "Telefon": 25,
        "Meyve": 1,
        "Sebze": 1
    };

    let currentKdvRate = 0; // Geçerli KDV oranı

    // KDV eklenmiş fiyatı hesaplayan fonksiyon
    function calculateKdvIncludedPrice() {
        const productPriceInput = document.getElementById('productPrice'); // Ürün fiyatı alanı
        const kdvIncludedPriceInput = document.getElementById('kdvIncludedPrice'); // KDV eklenmiş satış fiyatı alanı

        // Ürün fiyatını al ve geçerli KDV oranını uygula
        const productPrice = parseFloat(productPriceInput.value) || 0;
        const kdvIncludedPrice = productPrice + (productPrice * currentKdvRate / 100);

        // Hesaplanan fiyatı input alanına yaz
        kdvIncludedPriceInput.value = kdvIncludedPrice.toFixed(2) + " ₺";
    }

    // Kategori seçimi değiştiğinde çalışacak fonksiyon
    document.getElementById('categorySelect').addEventListener('change', function () {
        const selectedCategory = this.options[this.selectedIndex].text.trim();
        currentKdvRate = kdvRates[selectedCategory] || 0; // Seçilen kategoriye ait KDV oranını al
        document.getElementById('kdvInput').value = currentKdvRate + " %"; // KDV oranını input'a yaz
        calculateKdvIncludedPrice(); // Yeni oranla KDV eklenmiş fiyatı hesapla
    });

    // Ürün fiyatı değiştiğinde çalışacak fonksiyon
    document.getElementById('productPrice').addEventListener('input', function () {
        calculateKdvIncludedPrice(); // Fiyat değiştiğinde KDV eklenmiş fiyatı hesapla
    });
</script>
